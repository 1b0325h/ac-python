{
    // input
    "input_01": {
        "prefix": "input  iii",
        "body": [
            "${1:N} = int(input())"
        ],
        "description": ""
    },

    "input_02": {
        "prefix": "input  mii",
        "body": [
            "${1:A, B} = map(int, input().split())"
        ],
        "description": ""
    },

    "input_03": {
        "prefix": "input  lmi",
        "body": [
            "${1:X} = list(map(int, input().split()))"
        ],
        "description": ""
    },

    "input_04": {
        "prefix": "input  lci",
        "body": [
            "${1:X} = [int(input()) for _ in range(${2:N})]"
        ],
        "description": ""
    },

    "input_05": {
        "prefix": "input  qwi",
        "body": [
            "${1:X} = [list(map(int, input().split())) for _ in range(${2:N})]"
        ],
        "description": ""
    },

    "input_06": {
        "prefix": "input  qhi",
        "body": [
            "${1:XY} = [map(int, input().split()) for _ in range(${2:N})]",
            "${3:X, Y} = [list(_) for _ in zip(*${1})]"
        ],
        "description": ""
    },

    "input_07": {
        "prefix": "input  fwi",
        "body": [
            "${1:X} = [x for _ in range(${2:N}) for x in map(int, input().split())]"
        ],
        "description": ""
    },

    "input_08": {
        "prefix": "input  gni",
        "body": [
            "graph = [[] for _ in range(${1:N})]",
            "for _ in range(${2:M}):",
            "    u, v = map(int, input().split())",
            "    graph[u-1].append(v-1)",
            "    graph[v-1].append(u-1)"
        ],
        "description": ""
    },

    "input_09": {
        "prefix": "input  gyi",
        "body": [
            "graph = [[0]*${1} for _ in range(${1:N})]",
            "for _ in range(${2:M}):",
            "    u, v = map(int, input().split())",
            "    graph[u-1][v-1] = 1",
            "    graph[v-1][u-1] = 1"
        ],
        "description": ""
    },

    // library
    "imos1.py": {
        "prefix": "imos1",
        "body": [
            "def imos1(start, end, add):",
            "    table = [0] * (max(end)+2)",
            "    for i in range(len(start)):",
            "        table[start[i]] += add[i]",
            "        table[end[i]] -= add[i]",
            "    for i in range(1, max(end)+2):",
            "        table[i] += table[i-1]",
            "    return table",
            ""
        ],
        "description": ""
    },

    "binary_search.py": {
        "prefix": "binary_search",
        "body": [
            "def binary_search(ng, ok, f):",
            "    while abs(ok-ng) > 1:",
            "        mid = (ok+ng) // 2",
            "        if f(mid):",
            "            ok = mid",
            "        else:",
            "            ng = mid",
            "    return ok",
            ""
        ],
        "description": ""
    },

    "crt.py": {
        "prefix": "crt",
        "body": [
            "def extgcd(a, b):",
            "    if not a:",
            "        return (b, 0, 1)",
            "    d, y, x = extgcd(b%a, a)",
            "    return (d, x-b//a*y, y)",
            "",
            "def crt(rem, mod):",
            "    r, m = 0, 1",
            "    for i in range(len(rem)):",
            "        x, y, _ = extgcd(m, mod[i])",
            "        if (a := rem[i]-r) % x:",
            "            return (-1, 0)",
            "        r += m * (a//x*y % (mod[i]//x))",
            "        m *= mod[i]//x",
            "    return (r%m, m)",
            ""
        ],
        "description": ""
    },

    "gcd.py": {
        "prefix": "gcd",
        "body": [
            "def gcd(x, y):",
            "    while y:",
            "        x, y = y, x % y",
            "    return x",
            ""
        ],
        "description": ""
    },

    "lcm.py": {
        "prefix": "lcm",
        "body": [
            "def gcd(x, y):",
            "    while y:",
            "        x, y = y, x % y",
            "    return x",
            "",
            "def lcm(x, y):",
            "    return x * y // gcd(x, y)",
            ""
        ],
        "description": ""
    },

    "divisors.py": {
        "prefix": "divisors",
        "body": [
            "def divisors(n):",
            "    x, i = set(), 1",
            "    while i**2 <= n:",
            "        if not n % i:",
            "            x.add(i)",
            "            x.add(n//i)",
            "        i += 1",
            "    return sorted(x)",
            ""
        ],
        "description": ""
    },

    "is_prime.py": {
        "prefix": "is_prime",
        "body": [
            "def is_prime(n):",
            "    if n < 2:",
            "        return False",
            "    for i in range(2, int(n**0.5)+1):",
            "        if not n % i:",
            "            return False",
            "    return True",
            ""
        ],
        "description": ""
    },

    "prime_factors.py": {
        "prefix": "prime_factors",
        "body": [
            "def prime_factors(n):",
            "    table, i = [], 2",
            "    while i*i <= n:",
            "        if n % i:",
            "            i += 1",
            "        else:",
            "            n //= i",
            "            table.append(i)",
            "    if n > 1:",
            "        table.append(n)",
            "    return table",
            ""
        ],
        "description": ""
    },

    "base_n.py": {
        "prefix": "base_n",
        "body": [
            "def base_n(n, base):",
            "    digit, s = 0, \"\"",
            "    for i in range(10**9):",
            "        if n < base**i:",
            "            digit += i",
            "            break",
            "    for i in range(1, digit+1):",
            "        s += str(x := n // (base**(digit-i)))",
            "        n -= x * (base**(digit-i))",
            "    return s",
            ""
        ],
        "description": ""
    },

    "base_10.py": {
        "prefix": "base_10",
        "body": [
            "def base_10(n, base):",
            "    x, c = list(n), 0",
            "    while x:",
            "        c *= base",
            "        c += int(x.pop(0))",
            "    return c",
            ""
        ],
        "description": ""
    },

    "rperm.py": {
        "prefix": "rperm",
        "body": [
            "def rperm(p):",
            "    p = [0]+p",
            "    q = [-1]*len(p)",
            "    for i in range(1, len(p)):",
            "        q[p[i]] = i",
            "    return q[1:]",
            ""
        ],
        "description": ""
    },

    // import
    "Counter": {
        "prefix": "Counter",
        "body": [
            "from collections import Counter"
        ],
        "description": "collections"
    },

    "defaultdict": {
        "prefix": "defaultdict",
        "body": [
            "from collections import defaultdict"
        ],
        "description": "collections"
    },

    "ChainMap": {
        "prefix": "ChainMap",
        "body": [
            "from collections import ChainMap"
        ],
        "description": "collections"
    },

    "deque": {
        "prefix": "deque",
        "body": [
            "from collections import deque"
        ],
        "description": "collections"
    },

    "reduce": {
        "prefix": "reduce",
        "body": [
            "from functools import reduce"
        ],
        "description": "functools"
    },

    "lru_cache": {
        "prefix": "lru_cache",
        "body": [
            "from functools import lru_cache"
        ],
        "description": "functools"
    },

    "singledispatch": {
        "prefix": "singledispatch",
        "body": [
            "from functools import singledispatch"
        ],
        "description": "functools"
    },

    "product": {
        "prefix": "product",
        "body": [
            "from itertools import product"
        ],
        "description": "itertools"
    },

    "combinations": {
        "prefix": "combinations",
        "body": [
            "from itertools import combinations"
        ],
        "description": "itertools"
    },

    "combinations_with_replacement": {
        "prefix": "combinations_with_replacement",
        "body": [
            "from itertools import combinations_with_replacement"
        ],
        "description": "itertools"
    },

    "permutations": {
        "prefix": "permutations",
        "body": [
            "from itertools import permutations"
        ],
        "description": "itertools"
    },

    "accumulate": {
        "prefix": "accumulate",
        "body": [
            "from itertools import accumulate"
        ],
        "description": "itertools"
    },

    "chain": {
        "prefix": "chain",
        "body": [
            "from itertools import chain"
        ],
        "description": "itertools"
    },

    "compress": {
        "prefix": "compress",
        "body": [
            "from itertools import compress"
        ],
        "description": "itertools"
    },

    "groupby": {
        "prefix": "groupby",
        "body": [
            "from itertools import groupby"
        ],
        "description": "itertools"
    },

    "itemgetter": {
        "prefix": "itemgetter",
        "body": [
            "from operator import itemgetter"
        ],
        "description": "operator"
    },

    "mul": {
        "prefix": "mul",
        "body": [
            "from operator import mul"
        ],
        "description": "operator"
    },

    "ceil": {
        "prefix": "ceil",
        "body": [
            "from math import ceil"
        ],
        "description": "math"
    },

    "sqrt": {
        "prefix": "sqrt",
        "body": [
            "from math import sqrt"
        ],
        "description": "math"
    },

    "cos": {
        "prefix": "cos",
        "body": [
            "from math import cos"
        ],
        "description": "math"
    },

    "sin": {
        "prefix": "sin",
        "body": [
            "from math import sin"
        ],
        "description": "math"
    },

    "pi": {
        "prefix": "pi",
        "body": [
            "from math import pi"
        ],
        "description": "math"
    },

    "factorial": {
        "prefix": "factorial",
        "body": [
            "from math import factorial"
        ],
        "description": "math"
    },

    "inf": {
        "prefix": "inf",
        "body": [
            "from math import inf"
        ],
        "description": "math"
    },

    "match": {
        "prefix": "match",
        "body": [
            "from re import match"
        ],
        "description": "re"
    },

    "fullmatch": {
        "prefix": "fullmatch",
        "body": [
            "from re import fullmatch"
        ],
        "description": "re"
    },

    "search": {
        "prefix": "search",
        "body": [
            "from re import search"
        ],
        "description": "re"
    },

    "findall": {
        "prefix": "findall",
        "body": [
            "from re import findall"
        ],
        "description": "re"
    },

    "sub": {
        "prefix": "sub",
        "body": [
            "from re import sub"
        ],
        "description": "re"
    },

    "split": {
        "prefix": "split",
        "body": [
            "from re import split"
        ],
        "description": "re"
    },

    "ascii_letters": {
        "prefix": "ascii_letters",
        "body": [
            "from string import ascii_letters"
        ],
        "description": "string"
    },

    "ascii_lowercase": {
        "prefix": "ascii_lowercase",
        "body": [
            "from string import ascii_lowercase"
        ],
        "description": "string"
    },

    "ascii_uppercase": {
        "prefix": "ascii_uppercase",
        "body": [
            "from string import ascii_uppercase"
        ],
        "description": "string"
    },

    "digits": {
        "prefix": "digits",
        "body": [
            "from string import digits"
        ],
        "description": "string"
    },

    "comb": {
        "prefix": "comb",
        "body": [
            "from scipy.special import comb"
        ],
        "description": "scipy.special"
    },

    "minkowski": {
        "prefix": "minkowski",
        "body": [
            "from scipy.spatial.distance import minkowski"
        ],
        "description": "scipy.spatial.distance"
    },
}
